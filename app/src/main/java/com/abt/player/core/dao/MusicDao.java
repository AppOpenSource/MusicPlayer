package com.abt.player.core.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.abt.player.core.bean.Music;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property Music_id = new Property(1, int.class, "music_id", false, "MUSIC_ID");
        public final static Property Clicks = new Property(2, int.class, "clicks", false, "CLICKS");
        public final static Property Latest = new Property(3, String.class, "latest", false, "LATEST");
    }


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _id
                "\"MUSIC_ID\" INTEGER NOT NULL ," + // 1: music_id
                "\"CLICKS\" INTEGER NOT NULL ," + // 2: clicks
                "\"LATEST\" TEXT NOT NULL );"); // 3: latest
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
        stmt.bindLong(2, entity.getMusic_id());
        stmt.bindLong(3, entity.getClicks());
        stmt.bindString(4, entity.getLatest());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
        stmt.bindLong(2, entity.getMusic_id());
        stmt.bindLong(3, entity.getClicks());
        stmt.bindString(4, entity.getLatest());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // music_id
            cursor.getInt(offset + 2), // clicks
            cursor.getString(offset + 3) // latest
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setMusic_id(cursor.getInt(offset + 1));
        entity.setClicks(cursor.getInt(offset + 2));
        entity.setLatest(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
